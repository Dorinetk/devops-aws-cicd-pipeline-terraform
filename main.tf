// Lambda parameters and .zip file that will be uploaded to AWS
locals {
  // The name of our lambda function when is created in AWS
  function_name = "hello-world-lambda"
  // When our lambda is run / invoked later on, run the "handler"
  handler = "index.handler"
  // Run our lambda in java8
  runtime = "nodejs14.x"
  // By default lambda only runs for a max of 3 seconds but our
  // "hello world" is printed after 5 seconds. So, we need to
  // increase how long we let our lambda run (e.g. 6 seconds)
  timeout = 6

  // The .zip file we will create and upload to AWS later on
  zip_file = "hello-world-lambda.zip"
}

// Let terraform create a .zip file on your local computer which contains
// only our src file by ignoring any Terraform files (e.g. our .zip)
data "archive_file" "zip" {
  excludes = [
    ".terraform",
    ".terraform.lock.hcl",
    "main.tf",
    "backend.tf",
    "provider.tf",
    local.zip_file,
  ]
  source_dir = path.module
  type       = "zip"

  // Create the .zip file in the same directory as the src dir
  output_path = "${path.module}/${local.zip_file}"
}

// Create an AWS IAM resource who will act as an intermediary between
// our lambda and other AWS services such as Cloudwatch for "console.log"
data "aws_iam_policy_document" "default" {
  version = "2012-10-17"

  statement {
    // Let the IAM resource have temporary admin permissions to
    // add permissions for itself.
    // https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html
    actions = ["sts:AssumeRole"]
    effect  = "Allow"

    // Let the IAM resource manage our (future) lambda resource
    // https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#principal-services
    principals {
      identifiers = ["lambda.amazonaws.com"]
      type        = "Service"
    }
  }
}

resource "aws_iam_role" "default" {
  // Create a IAM resource in AWS which is given the permissions detailed
  // in our above policy document

  assume_role_policy = data.aws_iam_policy_document.default.json
  // name = is randomly generated by terraform
}

resource "aws_iam_role_policy_attachment" "default" {
  // In addition to letting our IAM resource connect to our (future) lambda
  // function, we also want to let our IAM resource connect to other AWS services
  // like Cloudwatch for to see our "console.log"
  // https://docs.aws.amazon.com/lambda/latest/dg/lambda-intro-execution-role.html#permissions-executionrole-features

  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  role       = aws_iam_role.default.name
}

// Create our lambda function in AWS and upload our .zip with our code to it
resource "aws_lambda_function" "default" {
  // Function parameters we defined at the beginning
  function_name = local.function_name
  handler       = local.handler
  runtime       = local.runtime
  timeout       = local.timeout

  // Upload the .zip file Terraform created to AWS
  filename         = local.zip_file
  source_code_hash = data.archive_file.zip.output_base64sha256

  // Connect our IAM resource to our lambda function in AWS
  role = aws_iam_role.default.arn

  // Optional environmental variables
  environment {
    variables = {
      ENV = "production"
    }
  }
}

// Deploy Lambda Function
module "hello-world-lambda" {
  source = "./modules/lambda"

  environment = [
    { key : "ENV", value : "production" },
  ]
  excluded_files = [
    ".terraform",
    ".terraform.lock.hcl",
    "main.tf",
    "backend.tf",
    "provider.tf",
  ]
  handler               = "handler.LambdaHandler"
  name                  = "hello-world-function"
  runtime               = "java8"
  source_directory      = path.module
  timeout_after_seconds = 6
}


# Upload zip to s3 
resource "aws_s3_bucket_object" "file_upload" {
  bucket = "ci-cd-functions-2023"
  key    = local.zip_file
  source = "${path.module}/${local.zip_file}"
}

## Setup IAM account for deployment
module "iam" {
  source                              = "./modules/iam"
  s3_tfstate_bucket                   = "ci-cd-functions-2023"
  s3_logging_bucket_name              = "ci-cd-functions-2023"
  codebuild_iam_role_name             = "CodeBuildIamRole"
  codebuild_iam_role_policy_name      = "CodeBuildIamRolePolicy"
  terraform_codecommit_repo_arn       = module.codecommit.terraform_codecommit_repo_arn
  tf_codepipeline_artifact_bucket_arn = module.codepipeline.tf_codepipeline_artifact_bucket_arn
}

## Build a CodeCommit git repo
module "codecommit" {
  source          = "./modules/codecommit"
  repository_name = "CodeCommitTerraform"
}

## Build CodeBuild projects for Terraform Plan and Terraform Apply
module "codebuild" {
  source                                 = "./modules/codebuild"
  codebuild_project_terraform_plan_name  = "TerraformPlan"
  codebuild_project_terraform_apply_name = "TerraformApply"
  s3_logging_bucket_id                   = "ci-cd-functions-2023"
  codebuild_iam_role_arn                 = module.iam.codebuild_iam_role_arn
  s3_logging_bucket                      = "ci-cd-functions"
}

## Build a CodePipeline
module "codepipeline" {
  source                               = "./modules/codepipeline"
  tf_codepipeline_name                 = "TerraformCodePipeline"
  tf_codepipeline_artifact_bucket_name = "ci-cd-functions"
  tf_codepipeline_role_name            = "TerraformCodePipelineIamRole"
  tf_codepipeline_role_policy_name     = "TerraformCodePipelineIamRolePolicy"
  terraform_codecommit_repo_name       = module.codecommit.terraform_codecommit_repo_name
  codebuild_terraform_plan_name        = module.codebuild.codebuild_terraform_plan_name
  codebuild_terraform_apply_name       = module.codebuild.codebuild_terraform_apply_name
}
